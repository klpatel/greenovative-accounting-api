// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Greenovative.Identity.Infrastructure.ClientModels;
using Greenovative.Identity.Infrastructure.Models;
using Microsoft.EntityFrameworkCore;

namespace Greenovative.Identity.Infrastructure;

public partial class IdentityContext : DbContext
{
    public IdentityContext()
    {
    }

    public IdentityContext(DbContextOptions<ApplicationIdentityDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AspNetRole> AspNetRoles { get; set; }

    public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }

    public virtual DbSet<AspNetUser> AspNetUsers { get; set; }

    public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }

    public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }

    public virtual DbSet<AspNetUserRole> AspNetUserRoles { get; set; }

    public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer("Data Source=172.18.16.1,1432;Initial Catalog=Db_Greenovative_Dev;User ID=sa;Password=nebula!123;Encrypt=True;TrustServerCertificate=True;")
        .EnableSensitiveDataLogging();

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AspNetRole>(entity =>
        {
            entity.ToTable("AspNetRoles", "identity");

            entity.HasIndex(e => e.NormalizedName, "RoleNameIndex")
                .IsUnique()
                .HasFilter("([NormalizedName] IS NOT NULL)");

            entity.Property(e => e.Name).HasMaxLength(256);
            entity.Property(e => e.NormalizedName).HasMaxLength(256);
        });

        modelBuilder.Entity<AspNetRoleClaim>(entity =>
        {
            entity.ToTable("AspNetRoleClaims", "identity");

            entity.HasIndex(e => e.RoleId, "IX_AspNetRoleClaims_RoleId");

            entity.HasOne(d => d.Role).WithMany(p => p.AspNetRoleClaims).HasForeignKey(d => d.RoleId);
        });

        modelBuilder.Entity<AspNetUser>(entity =>
        {
            entity.ToTable("AspNetUsers", "identity");

            entity.HasIndex(e => e.NormalizedEmail, "EmailIndex");

            entity.HasIndex(e => e.NormalizedUserName, "UserNameIndex")
                .IsUnique()
                .HasFilter("([NormalizedUserName] IS NOT NULL)");

            entity.Property(e => e.Email).HasMaxLength(256);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.NormalizedEmail).HasMaxLength(256);
            entity.Property(e => e.NormalizedUserName).HasMaxLength(256);
            entity.Property(e => e.UserName).HasMaxLength(256);
        });

        modelBuilder.Entity<AspNetUserClaim>(entity =>
        {
            entity.ToTable("AspNetUserClaims", "identity");

            entity.HasIndex(e => e.UserId, "IX_AspNetUserClaims_UserId");

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserClaims).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<AspNetUserLogin>(entity =>
        {
            entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });

            entity.ToTable("AspNetUserLogins", "identity");

            entity.HasIndex(e => e.UserId, "IX_AspNetUserLogins_UserId");

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserLogins).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<AspNetUserRole>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.RoleId });

            entity.ToTable("AspNetUserRoles", "identity");

            entity.HasIndex(e => e.RoleId, "IX_AspNetUserRoles_RoleId");

            entity.Property(e => e.ClientId).HasMaxLength(50);

            entity.HasOne(d => d.Role).WithMany(p => p.AspNetUserRoles).HasForeignKey(d => d.RoleId);

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserRoles).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<AspNetUserToken>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });

            entity.ToTable("AspNetUserTokens", "identity");

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserTokens).HasForeignKey(d => d.UserId);
        });

        #region
        modelBuilder.Entity<Address>(entity =>
        {
            entity.ToTable("Address", "client");

            entity.Property(e => e.Addr1)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Addr2)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.State)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Zip)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Client>(entity =>
        {
            entity.ToTable("Client", "client");

            entity.Property(e => e.ClientFName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ClientFName");

            entity.Property(e => e.ClientLName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ClientLName");

            entity.Property(e => e.ClientMName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ClientMName");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.IsActive)
                .HasMaxLength(10)
                .IsFixedLength(true);

            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Address)
                .WithMany(p => p.Clients)
                .HasForeignKey(d => d.AddressId)
                .HasConstraintName("FK_Client_Address");

            entity.HasOne(d => d.Contact)
                .WithMany(p => p.Clients)
                .HasForeignKey(d => d.ContactId)
                .HasConstraintName("FK_Client_Contact");


        });

        modelBuilder.Entity<Store>(entity =>
        {
            entity.ToTable("Store", "client");

            entity.Property(e => e.RegisteredName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.StoreName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.StoreNumber)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.TINNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TINNo");

            entity.HasOne(d => d.Client)
                .WithMany(p => p.Stores)
                .HasForeignKey(d => d.ClientId)
                .HasConstraintName("FK_Store_Client");


        });

        modelBuilder.Entity<Contact>(entity =>
        {
            entity.ToTable("Contact", "client");

            entity.Property(e => e.CellPhone)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Email1)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Email2)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.HomePhone)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.OfficePhone)
                .HasMaxLength(50)
                .IsUnicode(false);
        });
        modelBuilder.Entity<UserClientRole>(entity =>
        {
            //entity.HasNoKey();

            entity.ToTable("UserClientRole", "client");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
        });
        #endregion

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
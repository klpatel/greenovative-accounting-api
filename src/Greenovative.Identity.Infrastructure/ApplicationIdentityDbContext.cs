// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Greenovative.Identity.Infrastructure.ClientModels;
using Microsoft.EntityFrameworkCore;

namespace Greenovative.Identity.Infrastructure.Models;

public partial class ApplicationIdentityDbContext : DbContext
{
    public ApplicationIdentityDbContext(DbContextOptions<ApplicationIdentityDbContext> options)
        : base(options)
    {
    }

    public DbSet<User> Users { get; set; }
    public DbSet<Role> Roles { get; set; }

    public virtual DbSet<AspNetRole> AspNetRoles { get; set; }

    public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }

    public virtual DbSet<AspNetUser> AspNetUsers { get; set; }

    public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }

    public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }

    public virtual DbSet<AspNetUserRole> AspNetUserRoles { get; set; }

    public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }

    public virtual DbSet<Address> Addresses { get; set; }
    public virtual DbSet<Client> Clients { get; set; }
    public virtual DbSet<Contact> Contacts { get; set; }
    public virtual DbSet<UserClientRole> UserClientRoles { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<User>(entity =>
        {
            entity.ToTable("AspNetUsers", "identity");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.ToTable("AspNetRoles", "identity");
        });

        //modelBuilder.Entity<AspNetRole>(entity =>
        //{
        //    entity.ToTable("AspNetRoles", "identity");

        //    entity.HasIndex(e => e.NormalizedName, "RoleNameIndex")
        //        .IsUnique()
        //        .HasFilter("([NormalizedName] IS NOT NULL)");

        //    entity.Property(e => e.Id).ValueGeneratedNever();
        //    entity.Property(e => e.Name).HasMaxLength(256);
        //    entity.Property(e => e.NormalizedName).HasMaxLength(256);
        //});


        //modelBuilder.Entity<AspNetUser>(entity =>
        //{
        //    entity.ToTable("AspNetUsers", "identity");

        //    entity.HasIndex(e => e.NormalizedEmail, "EmailIndex");

        //    entity.HasIndex(e => e.NormalizedUserName, "UserNameIndex")
        //        .IsUnique()
        //        .HasFilter("([NormalizedUserName] IS NOT NULL)");

        //    entity.Property(e => e.Id).ValueGeneratedNever();
        //    entity.Property(e => e.Email).HasMaxLength(256);
        //    entity.Property(e => e.NormalizedEmail).HasMaxLength(256);
        //    entity.Property(e => e.NormalizedUserName).HasMaxLength(256);
        //    entity.Property(e => e.UserName).HasMaxLength(256);

        //    //entity.HasMany(d => d.Roles).WithMany(p => p.Users)
        //    //    .UsingEntity<Dictionary<string, object>>(
        //    //        "AspNetUserRole",
        //    //        r => r.HasOne<AspNetRole>().WithMany().HasForeignKey("RoleId"),
        //    //        l => l.HasOne<AspNetUser>().WithMany().HasForeignKey("UserId"),
        //    //        j =>
        //    //        {
        //    //            j.HasKey("UserId", "RoleId");
        //    //            j.ToTable("AspNetUserRoles", "identity");
        //    //            j.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");
        //    //        });
        //});

        modelBuilder.Entity<AspNetRoleClaim>(entity =>
        {
            entity.ToTable("AspNetRoleClaims", "identity");

            entity.HasIndex(e => e.RoleId, "IX_AspNetRoleClaims_RoleId");

            entity.HasOne(d => d.Role).WithMany(p => p.AspNetRoleClaims).HasForeignKey(d => d.RoleId);
        });

        modelBuilder.Entity<AspNetUserClaim>(entity =>
        {
            entity.ToTable("AspNetUserClaims", "identity");

            entity.HasIndex(e => e.UserId, "IX_AspNetUserClaims_UserId");

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserClaims).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<AspNetUserLogin>(entity =>
        {
            entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });

            entity.ToTable("AspNetUserLogins", "identity");

            entity.HasIndex(e => e.UserId, "IX_AspNetUserLogins_UserId");

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserLogins).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<AspNetUserRole>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.RoleId });
            entity.ToTable("AspNetUserRoles", "identity");

            entity.HasIndex(e => e.RoleId, "IX_AspNetUserRoles_RoleId");

            entity.HasOne(d => d.Client).WithMany(p => p.AspNetUserRoles)
                .HasForeignKey(d => d.ClientId)
                .HasConstraintName("FK_AspNetUserRoles_Client");

            entity.HasOne(d => d.Role)
                   .WithMany(p => p.AspNetUserRoles)
                   .HasForeignKey(d => d.RoleId);

            entity.HasOne(d => d.User)
                .WithMany(p => p.UserRoles)
                .HasForeignKey(d => d.UserId);

        });
        modelBuilder.Entity("AspNetRoleAspNetUser", b =>
        {
            b.Property<Guid>("RolesId")
                .HasColumnType("uniqueidentifier");

            b.Property<Guid>("UsersId")
                .HasColumnType("uniqueidentifier");

            b.HasKey("RolesId", "UsersId");

            b.HasIndex("UsersId");

            b.ToTable("AspNetRoleAspNetUser", "identity");
        });

        modelBuilder.Entity<AspNetUserToken>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });

            entity.ToTable("AspNetUserTokens", "identity");

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserTokens).HasForeignKey(d => d.UserId);
        });

        #region Client
        modelBuilder.Entity<Address>(entity =>
        {
            entity.ToTable("Address", "Client");

            entity.Property(e => e.Id).HasMaxLength(50);
            entity.Property(e => e.Addr1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Addr2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Zip)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Client>(entity =>
        {
            entity.ToTable("Client", "Client");

            entity.Property(e => e.Id).HasMaxLength(50);
            entity.Property(e => e.AddressId).HasMaxLength(50);
            entity.Property(e => e.ClientFName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientLName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientMName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContactId).HasMaxLength(50);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsActive)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Address).WithMany(p => p.Clients)
                .HasForeignKey(d => d.AddressId)
                .HasConstraintName("FK_Client_Address");

            entity.HasOne(d => d.Contact).WithMany(p => p.Clients)
                .HasForeignKey(d => d.ContactId)
                .HasConstraintName("FK_Client_Contact");
        });

        modelBuilder.Entity<Contact>(entity =>
        {
            entity.ToTable("Contact", "Client");

            entity.Property(e => e.Id).HasMaxLength(50);
            entity.Property(e => e.CellPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Email1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Email2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HomePhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OfficePhone)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UserClientRole>(entity =>
        {
            entity.ToTable("UserClientRole", "Client");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        #endregion

        OnModelCreatingPartial(modelBuilder);
    }
    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}